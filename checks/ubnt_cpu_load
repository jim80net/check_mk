#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mehdi Abaakouk 2012             sileht@sileht.net      |
# +------------------------------------------------------------------+
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# ails.  You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.


cpuload_default_levels = (5, 10)

def inventory_ubnt_cpu_load(info):
    if info:
        return [(None, "cpuload_default_levels")]

def check_ubnt_cpu_load(item, params, info):
    load = [ float(line[0]) / 100.0 for line in info[0] ]
    warn, crit = params # apply on 15min average, relative to number of CPUs
    perfdata = [ ('load' + str(z), l, warn, crit, 0 ) for (z,l) in [ (1,load[0]), (5,load[1]), (15, load[2]) ] ]

    if load[2] >= crit:
        return (2, "CRIT - 15min Load %.2f (critical at %.2f)" % (load[2], crit), perfdata)
    elif load[2] >= warn:
        return (1, "WARN - 15min Load %.2f (warning at %.2f)" % (load[2], warn), perfdata)
    else:
        return (0, "OK - 15min Load %.2f" % load[2], perfdata)

check_info['ubnt_cpu_load'] = (check_ubnt_cpu_load, "CPU load", 1,  inventory_ubnt_cpu_load )
checkgroup_of['ubnt_cpu_load'] = "cpu_load"

snmp_info['ubnt_cpu_load'] = ( ".1.3.6.1.4.1.10002.1.1.1.4.2.1.3", [ 1, 2, 3 ] )

snmp_scan_functions['ubnt_cpu_load'] = \
   lambda oid: oid(".1.3.6.1.2.1.1.2.0").startswith('.1.3.6.1.4.1.10002')

