#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mehdi Abaakouk 2012             sileht@sileht.net      |
# +------------------------------------------------------------------+
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# ails.  You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

ubnt_signal_default_levels = (-86, -100) # in db

def _oid_to_mac(oid):
    return ":".join([ "%02X" % int(n) for n in oid.split(".")[:-1] ])

def inventory_ubnt_signal_levels(info):
    return [ (_oid_to_mac(line[0]), "", "ubnt_signal_default_levels") for line in info ]

def check_ubnt_signal(item, params, info):
    warn, crit = params
    for line in info:
	mac = _oid_to_mac(line[0])
        if mac == item:
	    signal = saveint(line[1])
            tx = saveint(line[2])/1000/1000
            rx = saveint(line[3])/1000/1000
            perfdata = [ 
		("signal", signal, warn, crit, 0),
		("rx", rx, None, None, 0),
		("tx", tx, None, None, 0),
	    ]
            infotext = " - signal: %d dBm, RX/TX: %d/%d Mbps" % \
                (signal, rx, tx)
            if signal <= crit:
                return (2, "CRIT" + infotext, perfdata)
            elif signal <= warn:
                return (1, "WARN" + infotext, perfdata)
            else:
                return (0, "OK" + infotext, perfdata)
    return (3, "UNKNOWN - Station %s not found" % item)

check_info['ubnt_signal'] = ( check_ubnt_signal, "Station %s", 1, inventory_ubnt_signal_levels )
snmp_info['ubnt_signal'] = ( ".1.3.6.1.4.1.14988.1.1.1.2.1", [OID_END, 3, 8, 9])

snmp_scan_functions['ubnt_signal'] = \
   lambda oid: oid(".1.3.6.1.2.1.1.2.0").startswith('.1.3.6.1.4.1.10002')

