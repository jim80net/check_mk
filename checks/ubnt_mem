#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2012             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# ails.  You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

memused_default_levels = (150.0, 200.0)

def inventory_ubnt_mem(info):
    if info:
        return [(None, "memused_default_levels")]

def check_ubnt_mem(item, params, info):
    info = [ savefloat(i) / 1024.0 for i in info[0] ]
    totalram_mb, freeram_mb, bufferram_mb, cached_mb, totalvirt_mb, freevirt_mb = tuple(info)

    ramused_mb = totalram_mb - freeram_mb - cached_mb - bufferram_mb
    virtused_mb = totalvirt_mb - freevirt_mb

    totalmem_mb,  totalused_mb = totalram_mb + totalvirt_mb, ramused_mb + virtused_mb

    if totalmem_mb > 0:
        totalused_perc = 100 * totalused_mb / totalram_mb

        perfdata = [
            ('ramused', str(ramused_mb) + 'MB', None, None, 0, totalram_mb),
            ('swapused', str(virtused_mb) + 'MB', None, None, 0, totalvirt_mb) ]

        infotext = "%.2f MB used (%.2f MB RAM + %.2f MB SWAP, this is %.1f%% of %.2f MB RAM)" % \
               (totalused_mb, ramused_mb, virtused_mb, totalused_perc, totalram_mb)

        warn, crit = params
        if type(warn) == float:
            perfdata.append(('memused', str(totalused_mb)+'MB', int(warn/100.0 * totalmem_mb),
                        int(crit/100.0 * totalmem_mb), 0, totalvirt_mb))
            if totalused_perc >= crit:
                return (2, 'CRIT - %s, critical at %.1f%%' % (infotext, crit), perfdata)
            elif totalused_perc >= warn:
                return (1, 'WARN - %s, warning at %.1f%%' % (infotext, warn), perfdata)
            else:
                return (0, 'OK - %s' % infotext, perfdata)
        else:
            perfdata.append(('memused', str(totalused_mb)+'MB', warn, crit, 0, totalvirt_mb))
            if totalused_mb >= crit:
                return (2, 'CRIT - %s, critical at %.2f MB' % (infotext, crit), perfdata)
            elif totalused_mb >= warn:
                return (1, 'WARN - %s, warning at %.2f MB' % (infotext, warn), perfdata)
            else:
                return (0, 'OK - %s' % infotext, perfdata)

    return (3, "Invalid information. Total memory is empty.")

check_info["ubnt_mem"] = (check_ubnt_mem, "Memory used", 1, inventory_ubnt_mem)
snmp_info["ubnt_mem"] = ( ".1.3.6.1.4.1.10002.1.1.1", [
    "1.1.0", # memTotal
    "1.2.0", # memFree
    "1.3.0", # memBuffer
    "1.4.0", # memCached
    "2.1.0", # swapTotal
    "2.2.0", # swapFree
])
#snmp_scan_functions["ubnt_mem"] = lambda oid: \
#   lambda oid: oid(".1.3.6.1.2.1.1.2.0").startswith('.1.3.6.1.4.1.10002')
